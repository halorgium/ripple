require 'rubygems'
require 'rake/gempackagetask'

version = File.read('../VERSION').strip

gemspec = Gem::Specification.new do |gem|
  gem.name = "ripple"
  gem.summary = %Q{ripple is an object-mapper library for Riak, the distributed database by Basho.}
  gem.description = %Q{ripple is an object-mapper library for Riak, the distributed database by Basho.  It uses ActiveModel to provide an experience that integrates well with Rails 3 applications.}
  gem.version = version
  gem.email = "sean@basho.com"
  gem.homepage = "http://seancribbs.github.com/ripple"
  gem.authors = ["Sean Cribbs"]
  gem.add_development_dependency "rspec", "~>2.4.0"
  gem.add_dependency "riak-client", "~>#{version}"
  gem.add_dependency "activesupport", "3.1.0.beta1"
  gem.add_dependency "activemodel", "3.1.0.beta1"

  gem.files =  %W{
      Gemfile
      lib/rails/generators/ripple/configuration/configuration_generator.rb
      lib/rails/generators/ripple/configuration/templates
      lib/rails/generators/ripple/configuration/templates/ripple.yml
      lib/rails/generators/ripple/js/js_generator.rb
      lib/rails/generators/ripple/js/templates/js/contrib.js
      lib/rails/generators/ripple/js/templates/js/ripple.js
      lib/rails/generators/ripple/model/model_generator.rb
      lib/rails/generators/ripple/model/templates
      lib/rails/generators/ripple/model/templates/model.rb
      lib/rails/generators/ripple/test/templates/test_server.rb
      lib/rails/generators/ripple/test/test_generator.rb
      lib/rails/generators/ripple_generator.rb
      lib/ripple/associations/embedded.rb
      lib/ripple/associations/instantiators.rb
      lib/ripple/associations/linked.rb
      lib/ripple/associations/many.rb
      lib/ripple/associations/many_embedded_proxy.rb
      lib/ripple/associations/many_linked_proxy.rb
      lib/ripple/associations/one.rb
      lib/ripple/associations/one_embedded_proxy.rb
      lib/ripple/associations/one_linked_proxy.rb
      lib/ripple/associations/proxy.rb
      lib/ripple/associations.rb
      lib/ripple/attribute_methods/dirty.rb
      lib/ripple/attribute_methods/query.rb
      lib/ripple/attribute_methods/read.rb
      lib/ripple/attribute_methods/write.rb
      lib/ripple/attribute_methods.rb
      lib/ripple/callbacks.rb
      lib/ripple/conversion.rb
      lib/ripple/core_ext/casting.rb
      lib/ripple/core_ext.rb
      lib/ripple/document/bucket_access.rb
      lib/ripple/document/finders.rb
      lib/ripple/document/key.rb
      lib/ripple/document/persistence.rb
      lib/ripple/document.rb
      lib/ripple/embedded_document/finders.rb
      lib/ripple/embedded_document/persistence.rb
      lib/ripple/embedded_document.rb
      lib/ripple/i18n.rb
      lib/ripple/inspection.rb
      lib/ripple/locale
      lib/ripple/locale/en.yml
      lib/ripple/nested_attributes.rb
      lib/ripple/properties.rb
      lib/ripple/property_type_mismatch.rb
      lib/ripple/railtie.rb
      lib/ripple/timestamps.rb
      lib/ripple/translation.rb
      lib/ripple/validations/associated_validator.rb
      lib/ripple/validations.rb
      lib/ripple.rb
      Rakefile
      ripple.gemspec
      spec/fixtures/config.yml
      spec/integration/ripple/associations_spec.rb
      spec/integration/ripple/nested_attributes_spec.rb
      spec/integration/ripple/persistence_spec.rb
      spec/ripple/associations/many_embedded_proxy_spec.rb
      spec/ripple/associations/many_linked_proxy_spec.rb
      spec/ripple/associations/one_embedded_proxy_spec.rb
      spec/ripple/associations/one_linked_proxy_spec.rb
      spec/ripple/associations/proxy_spec.rb
      spec/ripple/associations_spec.rb
      spec/ripple/attribute_methods_spec.rb
      spec/ripple/bucket_access_spec.rb
      spec/ripple/callbacks_spec.rb
      spec/ripple/conversion_spec.rb
      spec/ripple/core_ext_spec.rb
      spec/ripple/document_spec.rb
      spec/ripple/embedded_document/finders_spec.rb
      spec/ripple/embedded_document/persistence_spec.rb
      spec/ripple/embedded_document_spec.rb
      spec/ripple/finders_spec.rb
      spec/ripple/inspection_spec.rb
      spec/ripple/key_spec.rb
      spec/ripple/persistence_spec.rb
      spec/ripple/properties_spec.rb
      spec/ripple/ripple_spec.rb
      spec/ripple/timestamps_spec.rb
      spec/ripple/validations_spec.rb
      spec/spec_helper.rb
      spec/support/associations/proxies.rb
      spec/support/mocks.rb
      spec/support/models/address.rb
      spec/support/models/box.rb
      spec/support/models/car.rb
      spec/support/models/cardboard_box.rb
      spec/support/models/clock.rb
      spec/support/models/customer.rb
      spec/support/models/driver.rb
      spec/support/models/email.rb
      spec/support/models/engine.rb
      spec/support/models/family.rb
      spec/support/models/favorite.rb
      spec/support/models/invoice.rb
      spec/support/models/late_invoice.rb
      spec/support/models/note.rb
      spec/support/models/page.rb
      spec/support/models/paid_invoice.rb
      spec/support/models/passenger.rb
      spec/support/models/seat.rb
      spec/support/models/tasks.rb
      spec/support/models/tree.rb
      spec/support/models/user.rb
      spec/support/models/wheel.rb
      spec/support/models/widget.rb
      spec/support/test_server.rb
      spec/support/test_server.yml.example
     }

  gem.test_files = gem.files.grep(/_spec\.rb$/)
end

# Gem packaging tasks
Rake::GemPackageTask.new(gemspec) do |pkg|
  pkg.need_zip = false
  pkg.need_tar = false
end

task :gem => :gemspec

desc %{Build the gemspec file.}
task :gemspec do
  gemspec.validate
  File.open("#{gemspec.name}.gemspec", 'w'){|f| f.write gemspec.to_ruby }
end

desc %{Release the gem to RubyGems.org}
task :release => :gem do
  system "gem push pkg/#{gemspec.name}-#{gemspec.version}.gem"
end

require 'rspec/core'
require 'rspec/core/rake_task'

desc "Run Unit Specs Only"
RSpec::Core::RakeTask.new(:spec) do |spec|
  spec.pattern = "spec/ripple/**/*_spec.rb"
end

namespace :spec do
  desc "Run Integration Specs Only"
  RSpec::Core::RakeTask.new(:integration) do |spec|
    spec.pattern = "spec/integration/**/*_spec.rb"
  end

  desc "Run All Specs"
  RSpec::Core::RakeTask.new(:all) do |spec|
    spec.pattern = "spec/**/*_spec.rb"
  end
end

task :default => :spec
